#!/bin/bash
#########################################################################/^--##
##
# FILE:		git-writebackup-import
# PRODUCT:	writebackup
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	03-Feb-2012
#
###############################################################################
# REMARKS:
#
# @(#)git-writebackup-import	$Id$	writebackup
#
###############################################################################

[ ${BASH_VERSINFO[0]} -ge 4 ] || { echo >&2 "ERROR: This script requires Bash 4.0 or higher!"; exit 2; }

set -o pipefail	# Pipes are used here for output filtering, so return the exit status from the first failing command.


printShortUsage()
{
    printf 'Usage: git init && %q %s\n' "$(basename "$1")" '[--commit-message-plugin /path/to/plugin] [--edit-message|--edit-plugin-message] path/to/srcdir [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Import a directory hierarchy into Git, using existing backup files with a
current date file extension (format '.YYYYMMDD[a-z]', as written by the
writebackup family of tools) as history.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --commit-message-plugin	Use the passed executable to determine the
				message used for each commit. Is passed the file
				to be committed, the previous version's file,
				and the commit date.
    --edit-message		Edit the (empty or plugin-generated) commit
				message on each commit.
    --edit-plugin-message	Edit each plugin-generated commit message on
				each commit. When there's no message, an empty
				commit message is used.

Example:
HELPTEXT
    printf '%s%q %s\n' 'git init ~/src/gitproject && ' "$(basename "$1")" '~/src/myproject'
}

IFS=$'\n'
declare -A datedOriginals=()
findOriginals()
{
    for filespec in $(find "$srcdir" -name '*.[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z]' -prune -o -type f -print)
    do
	modDate=$(date -d "$(stat -c %y "$filespec")" +%Y%m%d)
	local tmp=${datedOriginals["$modDate"]}
	datedOriginals["$modDate"]="${tmp}${tmp:+$'\n'}${filespec}"
    done
}
findBackupDates()
{
    find "$srcdir" -name '*.[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z]' | sed -e 's/^.*\.\([12][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)[a-z]$/\1/'
}
findOriginalsDates()
{
    echo "${!datedOriginals[@]}" | tr ' ' '
'
}
findCommitDates()
{
    (findBackupDates; findOriginalsDates) | sort -u
}

findDatedBackups()
{
    find "$srcdir" -name "*.${1}[a-z]" -type f -print | sort -u
}
findDatedOriginals()
{
    echo "${datedOriginals["$1"]}"
}
findDatedFiles()
{
    findDatedBackups "$1"
    findDatedOriginals "$1"
}

declare -A lastBackups=()
findLastBackup()
{
    local -r file=$1; shift
    # Populate a cache to avoid doing the same costly search repeatedly for each
    # committed backup version.
    lastBackup="${lastBackups["$file"]}"
    if [ ! "$lastBackup" ]; then
	lastBackup=$(cd "$srcdir" && ls -1 "$file".[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z] | tail -n 1)
	lastBackups["$file"]=$lastBackup
    fi
}
isLastBackupWithoutOriginal()
{
    local -r importFile=$1; shift
    local -r destFile=$1; shift
    local -r importOriginal="${srcdir}${destFile}"

    if [ "$destFile" != "$importFile" -a ! -e "$importOriginal" ]; then
	# This is a backup file where no original exists any more, so the file
	# should be removed from source control after the last backup file has
	# been committed.

	# As the backups are maintained in a global cache, the find must not be
	# done in a subshell.
	findLastBackup "$destFile"

	[ "$importFile" = "${lastBackups["$destFile"]}" ] && return 0
    fi

    return 1
}

importFile()
{
    local -r commitDate=$1; shift
    local -r importFile=$1; shift
    local -r destFile=$1; shift
    local -r destDir=$(dirname -- "$importFile")

    [ -d "$destDir" ] || mkdir -p "$destDir" || exit $?

    local editArgument=
    [ "$commitEditMessage" ] && editArgument='--edit'

    local message=
    if [ "$commitMessagePlugin" ]; then
	message=$("$commitMessagePlugin" "${srcdir}${importFile}" "$destFile" "$commitDate")

	if [[ "$commitEditMessage" = 'plugin' && ( $? != 0 || ! "$message" ) ]]; then
	    # The plugin returned an error or generated no message; do not edit
	    # the commit message.
	    editArgument=
	fi
    fi

    cp "$@" "${srcdir}${importFile}" "$destFile" || { local status=$?; echo >&2 "ERROR: Copying of ${srcdir}${importFile} to $destFile failed."; return $status; }
    git add "$@" "$destFile" || { local status=$?; echo >&2 "ERROR: git add $destFile failed."; return $status; }

    if git diff --cached --quiet; then
	echo >&2 "Note: File ${srcdir}${importFile} is identical to committed $destFile; ignoring."
	return 0
    fi

    if [ "$editArgument" ]; then
	# Cannot launch Vim in a pipe, so show the full unfiltered git commit
	# output when the commit is edited.
	git commit --allow-empty-message $editArgument --message="$message" --date="$(date -d "$commitDate")" || { local status=$?; echo >&2 "ERROR: git commit of $destFile failed."; return $status; }
    else
	{ git commit --allow-empty-message               --message="$message" --date="$(date -d "$commitDate")" || { local status=$?; echo >&2 "ERROR: git commit of $destFile failed." ; return $status; }; } | reformatGitCommitOutput
    fi
}
removeFile()
{
    local -r commitDate=$1; shift
    local -r destFile=$1; shift

    git rm --quiet "$destFile" || { local status=$?; echo >&2 "ERROR: git rm $destFile failed."; return $status; }
    git commit --allow-empty-message --message= --date="$(date -d "$commitDate")" || { local status=$?; echo >&2 "ERROR: git commit of removed $destFile failed."; return $status; }
}


reformatGitCommitOutput()
{
    sed -e '
/^\[.*\] *$/{
    s#\['"${branch//#/\\#}"' #[#
    s/(root-commit) //
    s/[][]//g
    h
}
/1 files changed/{
    s/^ *1 files changed, *//
    s/\([0-9]\+\) insertions(+)/+\1/
    s/\([0-9]\+\) deletions(-)/-\1/
    s/+0, //
    s/, -0//
    s/.*/(&)/
    H
}
$!d
${
    g
    s#$#\t'"${importFile//#/\\#}"'#
    s/^/    /
    s/\n//
}
'
}

commitEditMessage=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--commit-message-plugin)    shift; commitMessagePlugin="$1"; shift;;
	--edit-message)		    shift; commitEditMessage='--edit';;
	--edit-plugin-message)	    shift; commitEditMessage='plugin';;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ $# -ne 1 ] && { printUsage "$0" >&2; exit 2; }
readonly srcdir="${1%/}/"

git status >/dev/null || exit $?
branch=$(git symbolic-ref HEAD)
branch=${branch##refs/heads/}

findOriginals
echo "Importing files${branch:+ into }${branch}..."
for commitDate in $(findCommitDates)
do
    formattedCommitDate="${commitDate:0:4}-${commitDate:4:2}-${commitDate:6:2}"
    echo "${formattedCommitDate}:"

    for filespec in $(findDatedFiles "$commitDate")
    do
	importFile=${filespec#${srcdir}}
	destFile=${importFile%.[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z]}
	if ! importFile "$formattedCommitDate" "$importFile" "$destFile"; then
	    while :
	    do
		read -p "Committing failed. Do you want to (a)bort the import / (f)orce it / (c)ontinue? (a/f/c) " choice
		case "$choice" in
		    a)	exit 1;;
		    f)	importFile "$formattedCommitDate" "$importFile" "$destFile" --force || exit 1;;
		    c)	break;;
		esac
	    done
	fi

	if isLastBackupWithoutOriginal "$importFile" "$destFile"; then
	    removeFile "$formattedCommitDate" "$destFile" | reformatGitCommitOutput
	fi
    done
done
